/* 
See the NOTICE file distributed with this work for additional information
regarding copyright ownership.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for assembly metadata pipeline 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

import groovy.json.JsonSlurper

// Function to read and parse the JSON file
def loadJsonToDict(jsonFilePath) {
    def jsonSlurper = new JsonSlurper()
    def file = new File(jsonFilePath)
    def jsonContent = jsonSlurper.parse(file)
    return jsonContent 
    }

params {

    // Defult options
    taxon = '2759'
    ncbi_url = "https://api.ncbi.nlm.nih.gov/datasets/v2"
    help = false

    // Path to data files
    ncbi_params = "$projectDir/../data/ncbi_params.json"
    db_table_conf = "$projectDir/../data/db_table_conf.json"
    metadata_params = "$projectDir/../data/metadata_params.json"
    registry_params = "$projectDir/../data/registry_params.json"

    // Input options
    output_dir = null
    enscode = null
    full_screen = false
    // date format MM/DD/YYYY (optional)
    date = null

    // Define a dictionary from the JSON content
    metadata_db = loadJsonToDict(metadata_params)

}

scratch = ''
workDir = '' 

profiles {
    standard {
        executor {
            name = 'slurm'
            queueSize = 2000
            submitRateLimit = "10/1sec"
            queueGlobalStatus = true
            exitReadTimeout = "30 min"
        }
        process {
            clusterOptions = '-e errlog.txt'
        }
    }
}

process {
    cpus = 1
    memory = '500 MB'
    time = '60 min'
}